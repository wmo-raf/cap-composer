"""
Django settings for capcomposer project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
from email.utils import getaddresses

import dj_database_url
import environ

from capcomposer import VERSION
from capcomposer.config.telemetry.utils import otel_is_enabled

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
)

dev_env_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(BASE_DIR))), ".env")

if os.path.isfile(dev_env_path):
    # reading .env file
    environ.Env.read_env(dev_env_path)

# Application definition
INSTALLED_APPS = [
    "capcomposer.capeditor",
    "capcomposer.cap",
    "capcomposer.home",
    "adminboundarymanager",
    
    "wagtailiconchooser",
    "wagtailhumanitarianicons",
    "wagtail_lazyimages",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.contrib.settings",
    "wagtail.contrib.styleguide",
    "wagtail.contrib.sitemaps",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    
    "wagtail_modeladmin",
    'wagtailmodelchooser',
    "wagtailfontawesomesvg",
    
    "modelcluster",
    "taggit",
    "wagtailcache",
    "django_countries",
    "django_celery_beat",
    "wagtailmetadata",
    "wagtail_newsletter",
    
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    "django.contrib.sitemaps",
    
    "django_deep_translator",
    "dbbackup",
    "axes",
    "wagtail_2fa",
    "django_otp",
    "django_otp.plugins.otp_totp",
]

MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    'wagtail_2fa.middleware.VerifyUserPermissionsMiddleware',
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
    
    # AxesMiddleware should be the last middleware in the MIDDLEWARE list.
    # It only formats user lockout messages and renders Axes lockout responses
    # on failed user authentication attempts from login views.
    # If you do not want Axes to override the authentication response
    # you can skip installing the middleware and use your own views.
    'axes.middleware.AxesMiddleware',
]

if otel_is_enabled():
    MIDDLEWARE += ["capcomposer.config.telemetry.middleware.OTELMiddleware"]

ROOT_URLCONF = "capcomposer.config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(PROJECT_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "capcomposer.config.wsgi.application"
ASGI_APPLICATION = "capcomposer.config.asgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DB_ENGINE = 'capcomposer.config.db_engine'

DATABASES = {
    "default": dj_database_url.config(
        engine=DB_ENGINE,
        conn_max_age=600,
        conn_health_checks=True,
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    'axes.backends.AxesStandaloneBackend',
    
    # Django ModelBackend is the default authentication backend.
    'django.contrib.auth.backends.ModelBackend',
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = env.str("LANGUAGE_CODE", default="en")

TIME_ZONE = env.str("TIME_ZONE", "UTC")

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static"),
]

STATIC_ROOT = env.str("STATIC_ROOT", os.path.join(BASE_DIR, "static"))
STATIC_URL = "/static/"

MEDIA_ROOT = env.str("MEDIA_ROOT", os.path.join(BASE_DIR, "media"))
MEDIA_URL = "/media/"

# Default storage settings, with the staticfiles storage updated.
# See https://docs.djangoproject.com/en/5.0/ref/settings/#std-setting-STORAGES
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    # ManifestStaticFilesStorage is recommended in production, to prevent
    # outdated JavaScript / CSS assets being served from cache
    # (e.g. after a Wagtail upgrade).
    # See https://docs.djangoproject.com/en/5.0/ref/contrib/staticfiles/#manifeststaticfilesstorage
    "staticfiles": {
        "BACKEND": "capcomposer.config.storage.ManifestStaticFilesStorageNotStrict",
    },
}

DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': os.path.join(BASE_DIR, "backup")}
DBBACKUP_CLEANUP_KEEP_MEDIA = 1
DBBACKUP_CLEANUP_KEEP = 1
DBBACKUP_CONNECTORS = {
    "default": {
        "CONNECTOR": "dbbackup.db.postgresql.PgDumpBinaryConnector",  # Use pg_dump binary
        "DUMP_SUFFIX": "-e plpgsql",  # dump only system extensions
        "RESTORE_SUFFIX": "--if-exists"  # Drop only if exists
    }
}

# Wagtail settings
WAGTAIL_SITE_NAME = env.str("WAGTAIL_SITE_NAME", "CAP Composer")

# Search
# https://docs.wagtail.org/en/stable/topics/search/backends.html
WAGTAILSEARCH_BACKENDS = {
    "default": {
        "BACKEND": "wagtail.search.backends.database",
    }
}

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
WAGTAILADMIN_BASE_URL = env.str("WAGTAILADMIN_BASE_URL", "http://localhost")

ADMIN_URL_PATH = env.str("ADMIN_URL_PATH", "cap-admin")
DJANGO_ADMIN_URL_PATH = env.str("DJANGO_ADMIN_URL_PATH", default="cap-django-admin")

# Allowed file extensions for documents in the document library.
# This can be omitted to allow all files, but note that this may present a security risk
# if untrusted users are allowed to upload files -
# see https://docs.wagtail.org/en/stable/advanced_topics/deploying.html#user-uploaded-files
WAGTAILDOCS_EXTENSIONS = ['csv', 'docx', 'key', 'odt', 'pdf', 'pptx', 'rtf', 'txt', 'xlsx', 'zip']

# Wagtail Geowidget settings
GEO_WIDGET_DEFAULT_LOCATION = {'lat': 0, 'lng': 0}
GEO_WIDGET_ZOOM = 3

REDIS_HOST = env.str("REDIS_HOST", "redis")
REDIS_PORT = env.str("REDIS_PORT", "6379")
REDIS_USERNAME = env.str("REDIS_USER", "")
REDIS_PASSWORD = env.str("REDIS_PASSWORD", "")
REDIS_PROTOCOL = env.str("REDIS_PROTOCOL", "redis")
REDIS_URL = env.str(
    "REDIS_URL",
    f"{REDIS_PROTOCOL}://{REDIS_USERNAME}:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/0",
)

CELERY_BROKER_URL = REDIS_URL
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

CELERY_SINGLETON_BACKEND_CLASS = (
    "capcomposer.config.celery_singleton_backend.RedisBackendForSingleton"
)

# Set max memory per child process (in kilobytes, e.g., default 200000 KB = 200 MB)
CELERY_WORKER_MAX_MEMORY_PER_CHILD = env.int("CELERY_WORKER_MAX_MEMORY_PER_CHILD", default=200000)

CELERY_APP = "capcomposer.config.celery:app"

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
        "KEY_PREFIX": "capcomposer-default-cache",
        "VERSION": VERSION,
        "TIMEOUT": 60 * 60 * 4,  # 4 hours
    },
}

CAP_COMPOSER_LOG_LEVEL = env.str("CAP_COMPOSER_LOG_LEVEL", "INFO")
CAP_COMPOSER_DATABASE_LOG_LEVEL = env.str("CAP_COMPOSER_DATABASE_LOG_LEVEL", "ERROR")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "console": {
            "format": "%(levelname)s %(asctime)s %(name)s.%(funcName)s:%(lineno)s- %("
                      "message)s "
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "console",
        },
    },
    "loggers": {
        "django.db.backends": {
            "handlers": ["console"],
            "level": CAP_COMPOSER_DATABASE_LOG_LEVEL,
            "propagate": True,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": CAP_COMPOSER_LOG_LEVEL,
    },
}

# CAP settings
CAP_CERT_PATH = env.str("CAP_CERT_PATH", default="")
CAP_PRIVATE_KEY_PATH = env.str("CAP_PRIVATE_KEY_PATH", default="")
CAP_SIGNATURE_METHOD = env.str("CAP_SIGNATURE_METHOD", default="RSA_SHA256")
CAP_MQTT_SECRET_KEY = env.str("CAP_MQTT_SECRET_KEY", default="")
CAP_LIST_PAGE_PARENT_PAGE_TYPES = env.list("CAP_LIST_PAGE_PARENT_PAGE_TYPES", default=None)
CAP_MAX_LIST_PAGE_COUNT = env("CAP_MAX_LIST_PAGE_COUNT", default=None)
CAP_WIS2BOX_INTERNAL_TOPIC = env.str("CAP_WIS2BOX_INTERNAL_TOPIC", default="wis2box/cap/publication")
CAP_ALLOW_EDITING = env.bool("CAP_ALLOW_EDITING", default=False)

DATA_UPLOAD_MAX_MEMORY_SIZE = env.int("DATA_UPLOAD_MAX_MEMORY_SIZE", default=26214400)  # 25MB

# EMAIL SETTINGS
# Default email address used to send messages from the website.
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default="")

# A list of people who get error notifications.
ADMINS = getaddresses([env('DJANGO_ADMINS', default="")])

# A list in the same format as ADMINS that specifies who should get some content management errors
MANAGERS = ADMINS + getaddresses([env('DJANGO_MANAGERS', default="")])

# A list in the same format as DEVELOPERS for receiving developer aimed messages
DEVELOPERS = getaddresses([env('DJANGO_APP_DEVELOPERS', default="")])

# Email address used to send error messages to ADMINS.
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# Django AXES settings
AXES_LOCKOUT_PARAMETERS = [["username", "ip_address"]]
AXES_IPWARE_PROXY_COUNT = env.int("AXES_IPWARE_PROXY_COUNT", default=2)
AXES_LOCKOUT_TEMPLATE = "axes/lockout.html"

WAGTAIL_2FA_REQUIRED = env.bool("WAGTAIL_2FA_REQUIRED", default=False)

WAGTAIL_NEWSLETTER_MAILCHIMP_API_KEY = env("WAGTAIL_NEWSLETTER_MAILCHIMP_API_KEY", default="")
WAGTAIL_NEWSLETTER_FROM_NAME = env("WAGTAIL_NEWSLETTER_FROM_NAME", default="")
WAGTAIL_NEWSLETTER_REPLY_TO = env("WAGTAIL_NEWSLETTER_REPLY_TO", default="")
